---
import { Image } from "astro:assets";
import { type NavbarLink } from "../../types";
import Button from "../Button/Button.astro";

import Container from "../Container/Container.astro";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

const allServices = await getCollection("services");
allServices.sort((a, b) => (a.data.order > b.data.order ? 1 : -1));

const links: NavbarLink[] = [
    {
        label: "About",
        href: "#about-dropdown",
        sublinks: [
            {
                label: "About Us",
                text: "Get to know us better",
                icon: "about-us-icon.svg",
                href: "/about-us",
            },
            {
                label: "FAQs",
                text: "Answers to your questions",
                icon: "faqs-icon.svg",
                href: "/faq",
            },
            {
                label: "Contact",
                text: "Get in touch with us",
                icon: "contact-icon.svg",
                href: "/contact",
            },
        ],
    },
    {
        label: "Services",
        href: "#services-dropdown",
        sublinks: allServices.map((service) => ({
            label: service.data.title,
            text: service.data.shortDescription,
            icon: service.data.image,
            href: `/services/${service.id}`,
        })),
    },
    {
        label: "Pricing",
        href: "/pricing",
    },
    {
        label: "Blog",
        href: "/blog",
    },
];
---

<nav class="navbar" transition:persist>
    <Container>
        <a class="navbar_brand" href="/" aria-label="Home">
            <Icon name="transparent-logo" />
        </a>
        <div class="navbar_list">
            {
                links.map((link) => (
                    <>
                        <a href={link.href} class="navbar_link">
                            {link.label}{" "}
                            {link.hasOwnProperty("sublinks") ? (
                                <svg
                                    width="13"
                                    height="12"
                                    viewBox="0 0 13 12"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        d="M6.78418 8.25L3.03418 4.5L3.55918 3.975L6.78418 7.2L10.0092 3.975L10.5342 4.5L6.78418 8.25Z"
                                        fill="white"
                                        fill-opacity="0.5"
                                    />
                                </svg>
                            ) : (
                                ""
                            )}
                        </a>
                        {link.hasOwnProperty("sublinks") ? (
                            <div
                                class="navbar_dropdown"
                                data-dropdown={link.href}
                            >
                                <div class="navbar_dropdown-inner">
                                    {link.sublinks!.map((sublink) => (
                                        <a
                                            href={sublink.href}
                                            class="navbar_dropdown-link"
                                        >
                                            <Image
                                                src={import(
                                                    /* @vite-ignore */ `../../icons/${sublink.icon}`
                                                )}
                                                alt=""
                                            />
                                            <p>
                                                <span>{sublink.label}</span>
                                                {sublink.text}
                                            </p>
                                        </a>
                                    ))}
                                </div>
                            </div>
                        ) : (
                            ""
                        )}
                    </>
                ))
            }
        </div>
        <div class="navbar_actions">
            <Button type="secondary" link="#book-a-call">Book a Call</Button>
            <button class="navbar_menu">
                <svg
                    class="open"
                    width="40"
                    height="40"
                    viewBox="0 0 40 40"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    ><path
                        d="M6.25 10H33.75M6.25 20H33.75M6.25 30H33.75"
                        stroke="white"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path></svg
                >
                <svg
                    class="close"
                    width="40"
                    height="40"
                    viewBox="0 0 40 40"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    ><path
                        d="M10.6663 30.5133L9.48633 29.3333L18.8197 20L9.48633 10.6667L10.6663 9.48666L19.9997 18.82L29.333 9.48666L30.513 10.6667L21.1797 20L30.513 29.3333L29.333 30.5133L19.9997 21.18L10.6663 30.5133Z"
                        fill="white"></path></svg
                >
            </button>
        </div>
    </Container>
</nav>

<aside class="mobile-menu">
    <div class="mobile-menu_inner">
        <div class="mobile-menu_list">
            {
                links.map((link) => (
                    <>
                        <a href={link.href} class="mobile-menu_link">
                            {link.label}{" "}
                            {link.hasOwnProperty("sublinks") ? (
                                <svg
                                    width="13"
                                    height="12"
                                    viewBox="0 0 13 12"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        d="M6.78418 8.25L3.03418 4.5L3.55918 3.975L6.78418 7.2L10.0092 3.975L10.5342 4.5L6.78418 8.25Z"
                                        fill="white"
                                        fill-opacity="0.5"
                                    />
                                </svg>
                            ) : (
                                ""
                            )}
                        </a>
                        {link.hasOwnProperty("sublinks") ? (
                            <div
                                class="mobile-menu_dropdown"
                                data-dropdown={link.href}
                            >
                                <div class="mobile-menu_dropdown-inner">
                                    {link.sublinks!.map((sublink) => (
                                        <a
                                            href={sublink.href}
                                            class="mobile-menu_dropdown-link"
                                        >
                                            <Image
                                                src={import(
                                                   /* @vite-ignore */ `../../icons/${sublink.icon}`
                                                )}
                                                alt=""
                                            />
                                            <p>
                                                <span>{sublink.label}</span>
                                                {sublink.text}
                                            </p>
                                        </a>
                                    ))}
                                </div>
                            </div>
                        ) : (
                            ""
                        )}
                    </>
                ))
            }
            <a href="/contact" class="mobile-menu_link">Contact Us</a>
        </div>
        <Button type="secondary" link="#book-a-call">Book a Call</Button>
    </div>
    <div class="mobile-menu_backdrop"></div>
</aside>

<script is:inline>
    // @ts-nocheck
    window.trackLinkClick = (text, url) => {
        window.dataLayer = window.dataLayer || [];
        dataLayer.push({
            event: "link_click",
            link_text: text,
            link_url: url,
        });
    };

    const navbar = document.querySelector(".navbar");

    const handleScroll = () => {
        if (window.scrollY > 10) {
            navbar?.classList.add("scrolled");
        } else {
            navbar?.classList.remove("scrolled");
        }
    };

    window.addEventListener("scroll", handleScroll);

    handleScroll();

    const handleDropdown = (e) => {
        const linkEl = e.target.href
            ? e.target
            : e.target.closest(".navbar_link");
        const href = linkEl.href;

        const dropdown = document.querySelector(
            `.navbar_dropdown[data-dropdown="${"#" + href.split("#")[1]}"]`
        );
        const navbar = document.querySelector(".navbar");

        const activeDropdown = document.querySelector(
            ".navbar_dropdown.active"
        );

        if (
            activeDropdown &&
            activeDropdown.getAttribute("data-dropdown") !=
                "#" + href.split("#")[1]
        ) {
            activeDropdown.classList.remove("active");
            document
                .querySelector(".navbar_link.active")
                ?.classList.remove("active");
            navbar?.classList.remove("active");
        }

        dropdown?.classList.toggle("active");
        linkEl.classList.toggle("active");
        navbar?.classList.toggle("active");
    };

    const links = document.querySelectorAll(".navbar_link");

    links.forEach((linkEl) => {
        if (linkEl.querySelector("svg") != null) {
            linkEl.addEventListener("click", handleDropdown);
        } else {
            linkEl.addEventListener("click", (e) => {
                trackLinkClick(
                    e.target.textContent.trim(),
                    e.target.getAttribute("href")
                );
            });
        }
    });

    const handleDropdownSublink = (e) => {
        let url =
            e.target.getAttribute("href") ??
            e.target.closest("a").getAttribute("href");

        trackLinkClick(e.target.textContent.trim(), url);
    };

    document.querySelectorAll(".navbar_dropdown-link").forEach((linkEl) => {
        linkEl.addEventListener("click", handleDropdownSublink);
    });

    // Mobile
    document.querySelector(".navbar_menu").addEventListener("click", () => {
        document.body.classList.toggle("mobile-menu-active");
        document.body.classList.toggle("no-scroll");
        document.documentElement.classList.toggle("no-scroll");
    });

    window.handleMobileMenuDropdown = (e) => {
        const linkEl = e.target.href
            ? e.target
            : e.target.closest(".mobile-menu_link");
        const href = linkEl.href;

        const dropdown = document.querySelector(
            `.mobile-menu_dropdown[data-dropdown="${"#" + href.split("#")[1]}"]`
        );

        const activeDropdown = document.querySelector(
            ".mobile-menu_dropdown.active"
        );

        if (
            activeDropdown &&
            activeDropdown.getAttribute("data-dropdown") !=
                "#" + href.split("#")[1]
        ) {
            activeDropdown.classList.remove("active");
            document
                .querySelector(".mobile-menu_link.active")
                ?.classList.remove("active");
        }

        dropdown?.classList.toggle("active");
        linkEl.classList.toggle("active");
    };
</script>

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".mobile-menu_link").forEach((linkEl) => {
            if (linkEl.querySelector("svg") != null) {
                linkEl.addEventListener("click", handleMobileMenuDropdown);
            } else {
                linkEl.addEventListener("click", (e) => {
                    let url =
                        e.target.getAttribute("href") ??
                        e.target.closest("a").getAttribute("href");

                    trackLinkClick(e.target.textContent.trim(), url);
                });
            }
        });

        document
            .querySelector(".navbar_actions .button")
            .addEventListener("click", (e) => {
                window.dataLayer = window.dataLayer || [];
                dataLayer.push({
                    event: "button_click",
                    button_text: "Book a call",
                    button_url: "#book-a-call",
                    button_location: "navbar",
                });
            });

        document
            .querySelector(".mobile-menu_inner .button")
            .addEventListener("click", (e) => {
                window.dataLayer = window.dataLayer || [];
                dataLayer.push({
                    event: "button_click",
                    button_text: "Book a call",
                    button_url: "#book-a-call",
                    button_location: "navbar",
                });
            });
    });
</script>
