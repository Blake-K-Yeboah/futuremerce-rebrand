---
import "../styles/globals.scss";
import { type LayoutProps } from "../types";
import { ViewTransitions } from "astro:transitions";

import SEO from "../components/SEO/SEO.astro";
import Navbar from "../components/Navbar/Navbar.astro";
import Footer from "../components/Footer/Footer.astro";

const { title, metaInfo } = Astro.props as LayoutProps;

let itemType = "http://schema.org/WebPage";

if (metaInfo && metaInfo.itemType) itemType = metaInfo.itemType;
---

<!doctype html>
<html lang="en">
	<head>
		<SEO title={title} metaInfo={metaInfo} />

		<!-- Glide CSS -->
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/@glidejs/glide/dist/css/glide.core.min.css"
		/>

		<ViewTransitions />
	</head>
	<body itemscope itemtype={itemType}>
		<Navbar />
		<slot transition:animate="fade" />
		<Footer />

		<script>
			window.onload = function () {
				var pageTitle = document.title;
				var attentionMessage = "Hey, come back!";

				document.addEventListener("visibilitychange", function (e) {
					var isPageActive = !document.hidden;

					if (!isPageActive) {
						document.title = attentionMessage;
					} else {
						document.title = pageTitle;
					}
				});
			};
		</script>

		<script>
			// @ts-nocheck
			// Smooth Scrolling
			import Lenis from "@studio-freight/lenis";

			window.lenis = new Lenis();

			function raf(time: number) {
				lenis.raf(time);
				requestAnimationFrame(raf);
			}

			requestAnimationFrame(raf);
		</script>

		<script type="text/javascript" is:inline>
			// Cal.com
			(function (C, A, L) {
				let p = function (a, ar) {
					a.q.push(ar);
				};
				let d = C.document;
				C.Cal =
					C.Cal ||
					function () {
						let cal = C.Cal;
						let ar = arguments;
						if (!cal.loaded) {
							cal.ns = {};
							cal.q = cal.q || [];
							d.head.appendChild(d.createElement("script")).src =
								A;
							cal.loaded = true;
						}
						if (ar[0] === L) {
							const api = function () {
								p(api, arguments);
							};
							const namespace = ar[1];
							api.q = api.q || [];
							if (typeof namespace === "string") {
								cal.ns[namespace] = cal.ns[namespace] || api;
								p(cal.ns[namespace], ar);
								p(cal, ["initNamespace", namespace]);
							} else p(cal, ar);
							return;
						}
						p(cal, ar);
					};
			})(window, "https://app.cal.com/embed/embed.js", "init");
			Cal("init", { origin: "https://cal.com" });

			Cal("ui", {
				styles: { branding: { brandColor: "#8b81ff" } },
				hideEventTypeDetails: false,
				layout: "month_view",
			});
		</script>
	</body>
</html>
